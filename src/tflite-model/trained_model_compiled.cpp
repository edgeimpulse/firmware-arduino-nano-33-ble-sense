/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.04.2023 11:45:30

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1456;
#else
constexpr int kTensorArenaSize = 432;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[6];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,27 } };
const TfArray<1, float> quant0_scale = { 1, { 37.241115570068359, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[100*27] = { 
  -44, 9, 38, 39, 37, -30, -36, -27, 26, 14, 8, 8, 5, -7, 42, 41, 28, 13, 34, -10, -53, -45, 6, -4, 32, -51, 36, 
  -7, 28, -8, -26, -14, -24, 40, 43, -32, -63, 27, -31, 34, -29, -51, 1, 20, -17, 26, 24, -7, 41, -22, -35, 32, -42, -9, 
  14, 24, 2, -58, 22, 38, -36, 16, 44, 28, 62, 34, 16, -30, 37, 32, 27, 52, 13, -54, 64, 34, -5, -1, 46, -20, 22, 
  -42, 15, 6, -20, -47, 46, 6, 44, 9, -31, 30, -38, -40, 13, 22, -37, 22, 23, -5, -44, -2, 10, 16, 28, 15, -39, -30, 
  19, 64, 14, -7, 4, -21, 7, -11, 27, 30, 18, -30, -41, 3, -1, 27, -1, 5, -16, -56, 35, 5, 15, 4, -33, 38, -24, 
  21, 18, -21, 6, -26, 19, 18, 26, -6, 23, -6, 31, -19, -5, -49, -48, -48, 37, 9, 2, 1, -29, -2, -31, -40, 21, -22, 
  -39, 10, -49, 9, 8, 1, 20, -23, 36, -6, 21, 23, 21, -44, -43, -27, 20, -29, -20, -21, 34, -44, 36, 22, 26, 3, -29, 
  1, 67, 42, -3, -2, -55, -56, 13, 3, 61, 19, 15, -7, 17, -34, 35, 57, 20, -23, -76, 5, 6, 37, 23, 9, 49, 1, 
  12, 20, -28, -32, -11, 37, -25, 10, 18, 10, -72, 21, -10, 37, 14, 42, -16, -1, 36, 16, 37, 17, -6, -36, -24, -38, -19, 
  -9, -7, 4, -25, 25, -40, -44, 35, -41, -41, -12, -43, -27, 36, 3, 0, -5, 23, -52, -2, 4, -20, -42, -3, 8, -19, 19, 
  -62, -25, 0, -30, -29, 12, 43, 6, -32, 6, 43, -23, -23, -30, -29, -27, 28, 6, 14, 7, -72, 19, 0, -17, 27, 22, -48, 
  43, 64, -9, 17, 13, -36, -46, -35, -20, 11, -1, -32, -15, 33, -29, 19, -27, -5, 5, -80, 10, 25, -1, -10, 26, 3, 38, 
  7, -31, -18, -44, -46, -6, 34, -39, -12, -34, -20, 16, -38, 27, -50, 27, -5, 29, 10, 80, -15, 28, -37, 33, -35, 13, -21, 
  7, -5, 34, 10, -50, 39, -45, 25, -15, 1, -18, 14, 0, 28, 37, -38, 11, 18, -3, -34, -5, -29, 36, -27, -22, 14, -28, 
  -31, -7, -46, -13, 6, 0, 6, -49, -2, 1, -28, -32, -44, 8, 34, 16, 20, 28, 12, 3, -34, -37, -52, -24, -16, -41, -38, 
  -36, 46, -39, -38, 9, -15, -44, -19, 41, 11, 17, 18, 23, 22, 37, 26, -8, -59, -45, -5, -3, 38, 38, -27, 8, -10, -28, 
  -48, -2, -12, 16, -32, 15, -3, 3, 2, 5, 36, -5, -23, -23, -25, -49, 19, 16, -58, -16, 36, 1, 24, -38, 5, -12, 28, 
  -7, 8, 31, -23, -50, -10, 25, -38, -34, 63, -25, -20, 31, -15, 35, 41, 47, 1, 24, -79, 97, -15, 30, 20, -8, -22, -18, 
  -36, 42, -25, 28, 23, -51, 18, 27, -25, 38, 12, -28, -2, 12, 10, -32, -39, -32, -25, 11, 20, 18, -14, 15, 14, -25, 24, 
  -22, -24, -22, 17, -17, 43, -48, -1, -39, -5, 77, -8, 10, 37, 33, 22, -16, 48, -30, 73, -34, -26, -33, -60, -34, 26, -59, 
  -45, -46, -32, 43, -44, -49, -47, -32, 37, -30, 38, 15, -17, 12, -38, 22, 11, -29, -56, 27, -48, 14, -12, 18, 21, 23, -73, 
  5, 41, -14, -27, -29, 9, 41, -17, 6, 5, 64, -37, 2, 8, 20, -41, -39, -40, -11, 8, 44, -45, -4, -46, -7, -56, -39, 
  -45, -53, -18, -44, -9, 4, 35, 10, -9, 37, 2, 33, -54, -27, 18, -36, -24, -6, 20, -4, 43, -30, 13, 29, 37, -12, -5, 
  -14, -33, -42, -15, -32, 1, 34, 10, -11, 35, -28, 26, -27, -16, -19, -42, -28, 35, -32, -37, -29, -4, -30, -5, -47, -32, -22, 
  30, -15, 9, -23, -19, 41, -27, 28, -41, 43, -55, 33, 9, 7, -3, 16, 26, -13, 29, -45, 8, -33, 35, 31, 0, 56, 17, 
  -29, 4, -25, -25, -42, 1, 39, -9, 7, -47, -6, 9, 1, 27, -17, 17, 5, -15, 3, 49, -27, -3, 33, 2, -13, 13, 16, 
  33, 21, -13, -19, -13, -33, -27, 4, -11, 38, -17, 0, -15, 12, 23, 12, 7, -22, -19, 34, -12, 20, 17, -52, -22, 28, -48, 
  39, 4, -19, -3, -44, 18, 22, -57, -54, 19, 12, 7, 22, 13, 31, 1, 40, 25, -47, -41, -7, -11, -5, -6, 33, -29, -49, 
  20, -32, 22, 7, -16, -40, 16, -19, -37, 38, -29, -57, 32, -50, -37, 18, -13, 21, -6, -3, -2, 4, -15, 36, 10, -20, -23, 
  6, -15, -37, 14, -32, -13, 18, -8, -15, 23, 88, -49, -16, 44, -23, 27, -49, -12, 7, 20, -4, -36, 5, 36, -19, 7, 30, 
  -55, 1, 48, -33, -2, -44, -19, -24, -7, 7, -34, 27, 10, 34, -15, -38, 46, 29, -23, 57, -43, 52, 17, -41, -15, -21, -32, 
  37, 47, 56, 7, -19, -18, 17, 56, -8, -36, 23, 45, -6, 32, -23, -29, -11, 35, 46, -27, 12, -37, -9, -18, 47, 11, 49, 
  34, 1, -43, 22, -11, -37, -17, -28, 12, 31, -36, 1, -21, 42, -38, 4, -5, -23, 13, 11, -30, 15, 28, 18, -2, 29, -23, 
  17, 25, 57, -28, -20, 25, 52, 51, 0, -27, -20, 21, 2, 15, -48, 14, -23, 30, 34, 14, 10, 24, -40, -30, 6, -13, 7, 
  -50, 34, 14, -30, 16, -46, -13, 7, -48, 43, -21, 8, 28, 24, -9, 43, -32, -5, 50, -54, -18, -25, 20, 17, -19, -48, -16, 
  21, -43, 12, -6, -25, 25, -44, -53, -38, -75, 30, 7, -32, -35, -28, -28, 37, -40, -9, -33, -70, -20, 27, -17, 54, 11, -8, 
  41, -6, -38, 32, -44, -11, -10, -5, 47, 23, 40, -38, -16, -8, -38, 38, 46, 1, 38, 40, 28, -46, -26, -45, -48, -20, 28, 
  6, 21, 33, -3, -10, -29, 11, 48, 32, 33, 16, -1, -12, -16, 34, -39, -46, 40, -35, 23, 65, -12, 39, 4, 20, -35, 9, 
  -9, -5, -33, -16, -41, 37, 19, 18, -47, -37, -58, -7, -14, -37, -25, -25, 24, 3, 35, 20, -45, -33, 42, 39, -13, -48, -46, 
  19, 5, 27, 10, 26, -1, -34, 36, -19, -19, 38, 31, -38, 41, -34, 14, 29, -14, -10, 25, 3, 0, -48, -28, -8, -37, 35, 
  -21, -14, -16, -20, 39, 14, 5, 38, 31, 50, -81, 2, -19, 26, -1, 50, 25, 23, 38, -61, 111, -24, -10, 10, 31, -3, 5, 
  -13, 40, 0, -33, -39, 22, -47, 15, 1, -21, -33, 71, -23, -38, -12, -34, -49, 22, -43, 44, -20, 17, 23, -43, 12, 31, -54, 
  -30, 11, -22, -20, -32, -13, -39, 14, -3, -5, 6, 21, -51, 3, 0, -5, -33, 24, -38, -46, 92, 39, 12, -30, 32, -41, -12, 
  -57, -12, -17, -12, 31, -26, -7, -25, -20, -52, -13, -10, -12, -51, -10, 12, -36, -34, -27, -7, -81, -28, -14, 14, 56, 45, 32, 
  -29, -18, -7, -21, -18, 20, -24, 24, -31, 35, 11, -35, -16, -32, -6, 10, 26, -24, 19, 22, -35, -13, -21, 49, -38, -41, 6, 
  -11, 4, 32, 17, -9, -12, 9, 14, 44, 17, 10, -34, 41, 17, -29, 42, 3, 9, -48, 56, 2, -31, 28, -22, 9, -29, -25, 
  -10, -9, -59, 23, 40, 6, -33, 28, -45, 40, 22, 12, 8, -13, -11, 9, -22, 34, -1, -27, 20, -45, 25, -45, 1, -19, -12, 
  -58, -55, -41, -26, -51, 13, -41, 4, 21, 14, -27, 48, 16, -32, -30, -6, -14, -45, -74, 27, -127, 31, 33, 40, -45, -21, -50, 
  15, -15, 4, -10, -11, 9, -23, 2, -36, 20, 11, 16, -28, 4, 19, 22, 30, 16, -50, -44, 21, -43, -40, -51, 36, -24, -17, 
  7, -16, -17, 40, -4, -22, 3, 38, 29, -9, -22, -13, 44, -27, -25, 32, -24, -20, 27, -44, 21, -30, 13, -8, -21, -8, 42, 
  -52, -3, 21, 27, 24, 24, -43, 8, 38, 21, -20, 62, 30, -16, -32, -48, -35, -30, 11, -7, 2, 44, -36, 23, 34, -21, -13, 
  -12, 17, -12, 23, -7, 35, -36, 17, -58, -10, 24, 1, 25, -30, -5, 11, 13, 40, 0, 52, -11, 9, -39, 53, 33, -52, 18, 
  9, -21, -28, -5, 40, 10, -21, -7, 5, -11, -18, 3, 15, 40, 12, 19, 52, -6, -33, 34, -27, -6, 10, 21, -8, -34, -4, 
  -21, -11, 25, -24, 19, 12, 19, -28, 34, -16, -7, 57, 48, 31, -1, 2, 12, -31, -52, 54, -37, -9, 29, -54, -42, -6, 34, 
  41, 34, -35, -26, -31, -3, 38, 0, 29, -56, 28, 12, -18, 36, 30, -13, -27, 17, 25, -12, -43, -41, 10, 2, -21, -51, -15, 
  -17, -21, -24, 30, 9, 15, -45, 28, 36, 47, 5, -28, -38, -44, 15, -18, 32, 25, -2, -26, 21, -3, -55, 40, 28, -12, -27, 
  31, -8, -21, 23, -21, 6, -2, -16, -29, 39, 0, 9, -12, 16, 29, 14, 27, -30, 67, -16, 19, 19, -23, 20, -1, 26, -15, 
  -57, 17, -13, -9, 24, 44, 6, 0, -44, 22, -26, -27, 29, -24, -52, -22, -31, -48, -67, 34, -52, 23, 36, -19, 21, -20, 43, 
  57, -24, 19, -12, -22, -13, 42, 2, 24, 31, -14, -20, 44, 42, -5, -30, -22, 6, 30, 8, 34, -19, 34, 41, -24, -9, -11, 
  23, -44, -12, -50, 39, 45, 51, -25, 42, 21, -5, -45, 15, 29, -2, 3, -18, 33, 9, 56, 22, -5, 40, 34, 20, -22, -19, 
  17, -30, 27, 28, -37, -22, 34, 8, 26, -1, 43, -20, -19, 9, 5, 1, 42, -3, 59, -62, 54, 3, -3, -16, 47, 42, -8, 
  -19, -40, -32, 34, -26, -27, -10, 31, -1, -4, -44, 6, 32, 27, -24, 35, -39, -13, -32, -63, 39, -16, -15, -37, -21, 28, -6, 
  20, -34, 2, 37, 6, -12, 11, -25, -7, 57, -47, 29, 15, 22, 45, -30, 25, -25, -10, 15, -4, -3, -15, -39, 37, -41, 20, 
  13, 13, 28, 39, -8, 31, -46, -43, 19, 23, 55, 39, 30, -50, -34, -28, 2, 35, 21, 24, 33, 18, -8, 0, -25, -55, -1, 
  35, 5, -31, 8, 11, 46, 30, -31, -11, 36, -44, -23, -23, -11, 10, -1, -25, -31, -18, 50, 32, -13, 43, -36, -1, 3, 27, 
  -12, -3, -30, 25, -18, 26, 44, 47, 23, -12, -26, 16, 2, 8, -45, 14, -2, -40, -4, -17, -9, -22, -11, 25, 34, -27, -32, 
  -18, -17, -41, 12, -38, 15, -1, 11, -20, 19, -12, -10, -21, -24, 20, 36, -6, 41, 36, 66, -11, -36, 25, 17, 2, -7, -3, 
  -20, 32, -31, 3, -12, 15, -30, 16, -35, -2, 71, -15, 33, 27, 40, 30, -15, -43, -58, -9, -3, 24, -23, -33, -36, -33, -12, 
  -47, 23, -7, 32, -29, 34, 15, -45, 25, -28, -48, 41, 50, -1, 42, 39, -11, 23, -13, 30, -34, -9, -22, 21, -42, 21, 8, 
  26, 32, 19, 37, 36, 39, -37, 1, 25, -2, 39, 50, -28, 35, 11, 29, 24, 16, -27, -46, -8, -38, -41, -29, -36, 4, -47, 
  -45, 3, 32, -15, -45, 16, 0, -31, 39, -29, -18, -56, -41, -49, -31, 23, -44, 17, -20, 71, -17, 39, 13, 28, 10, -25, -45, 
  -20, 34, -55, 36, 9, -27, -20, 28, -46, -28, 62, -64, -2, 9, 42, -38, 19, -32, -47, 12, -57, 30, -30, -36, 37, -40, 6, 
  -42, -6, 49, -45, -11, 38, 38, -40, 30, -18, -42, 47, -4, 36, -5, -23, -13, -10, -9, -1, -62, 26, -24, 28, -32, -41, -6, 
  26, 14, -28, 10, -25, 39, 17, 19, -19, -4, -19, -53, -7, -52, 14, -19, -11, -36, -13, 42, -57, -48, 1, -38, 1, 21, 28, 
  -38, -4, -14, -20, 14, -25, 26, -45, -55, 12, 28, 48, -10, -43, -12, -19, 17, -48, -51, 49, -69, 37, 9, -18, 17, -30, -1, 
  27, -7, -5, 26, -39, 3, 28, -2, 1, -3, 17, -22, -18, -42, -24, -31, -18, 31, -7, -16, -1, 17, 35, 39, 42, -27, 9, 
  0, -10, -39, -42, 29, 44, 31, -43, -37, 38, 10, 11, 43, 2, -13, 16, -56, 15, 26, 42, -1, 19, -43, 5, 37, -29, 38, 
  -46, -28, -14, -27, -41, 24, 3, -44, 34, 4, 40, 26, 34, -9, -46, 29, -44, -23, 36, 64, -60, -14, 7, 49, 45, 2, 51, 
  24, -28, -7, -40, 39, 2, -2, 2, -30, 1, -24, -29, -36, -40, -57, 17, -53, -32, -42, 50, -28, 16, 43, 26, -27, -38, -16, 
  16, 40, -27, 10, -45, -49, 19, 17, 15, -27, -22, 3, -39, 7, -26, -21, 6, -49, -49, 66, -10, -3, 41, 27, 23, 47, 34, 
  -14, 12, 30, -46, -33, -21, 11, -11, -41, 4, -2, 21, -23, -41, -14, 28, -4, 34, 13, 34, 16, 15, -14, -7, 40, -29, 41, 
  10, 35, -25, 22, 16, 4, -41, -21, -38, -28, 29, -32, -7, -7, 26, -41, -19, -45, -58, -29, -46, -29, 32, 2, 17, -26, -16, 
  -8, 4, 24, -50, -21, -24, -30, -30, -15, -51, 39, 36, 15, 36, -21, -21, 30, 14, 37, 10, 12, -34, 44, -43, -47, -14, 20, 
  8, 30, -3, 28, -11, 6, -14, -4, -36, 28, -53, -38, -21, 14, -2, 20, 21, -17, 21, 2, 4, -40, 5, -3, -15, -30, -39, 
  20, 29, -46, 6, -8, 0, -28, -23, -45, 26, 33, -8, 38, -50, 14, 47, 30, 37, 60, -32, 30, 23, -20, 37, 44, 23, 28, 
  -4, -40, 33, 36, -36, 13, -18, -30, -16, -8, -21, -5, 2, -39, -29, 20, 47, -15, -38, 30, 19, -2, 15, -50, 2, 46, 46, 
  -21, 27, 44, -20, 10, -16, -20, -21, -10, 19, -46, 9, -23, -9, -21, 8, 21, 1, -46, 40, -4, -11, -31, -15, -34, -21, 28, 
  -46, -38, -28, -21, -10, 27, 0, 13, -38, -2, 15, -28, -43, -27, 17, 34, -31, 42, -41, 33, -8, -14, -11, 8, -41, 28, 41, 
  37, -48, -49, 5, -11, -1, 36, 15, -4, 45, -9, 7, 36, -47, -34, -4, 25, -1, 3, -21, -57, 19, 45, 27, 29, 53, 33, 
  -49, -20, 0, -39, 27, 19, -20, 26, 11, 34, 31, 14, 41, 18, 17, -31, -49, 8, -29, -24, -19, 46, -29, 47, 13, -44, -37, 
  41, 38, -4, -6, -29, -45, 39, -6, 12, -48, 32, 48, -42, -29, 12, 29, -35, 29, 4, 40, -47, 20, -42, -48, 17, -50, 17, 
  -4, 41, -45, 27, 26, 24, 37, -25, -45, -5, 57, 1, 2, 22, -17, -16, -1, -43, -54, -27, 4, -6, 18, -33, 42, 24, -3, 
  37, 45, 42, -10, -40, -20, -41, 44, -4, 20, 38, 20, -12, -39, -40, 19, -28, -14, 4, -38, -16, -5, -5, -47, -13, -5, 41, 
  -5, 41, -1, 35, -51, -16, 39, -50, -28, 31, 41, -18, -4, 37, 35, 38, 16, 41, 7, 29, 12, 37, 7, -41, -47, -38, -38, 
  24, -16, 0, -26, 30, 5, 40, -16, -17, 3, -16, 34, -45, -43, -18, -6, -18, -24, 24, -15, -40, 34, -18, -41, -8, 27, 21, 
  -13, 22, 52, 31, -23, -4, 26, 31, -21, 32, -6, -38, -6, -16, -27, 46, -9, 43, 21, 36, -39, -7, 39, -32, -6, -20, 17, 
  -6, 27, -33, -7, 22, 40, 6, 12, 15, 15, -19, -22, -16, 42, 8, 48, 19, -19, -9, -11, 87, -6, 5, 36, 26, -30, 44, 
  28, -18, -25, 36, 36, 21, -44, 2, 42, -63, 63, -50, 40, 8, 18, -61, 6, -47, 26, 86, -58, -15, 25, 21, -25, -29, 46, 
  46, 8, -32, -23, -33, -2, 24, 35, 52, 12, 27, -12, 27, 25, 42, -28, -43, 4, 26, -34, 29, 16, 8, 37, 50, -27, -27, 
  4, 59, 57, -10, 27, -51, 12, -12, -31, -53, -15, 3, -35, -37, -47, 37, -53, 19, 31, 8, 91, 25, 8, 13, 19, 29, 19, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 100,27 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0044608833268284798, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[100] = { 0, -1, 2, 0, 1, 0, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 1, -2, 1, 0, 1, 0, 0, 0, 0, -1, 0, -1, 0, 1, -1, -1, -1, 0, -1, 1, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, -1, 1, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 100 } };
const TfArray<1, float> quant2_scale = { 1, { 0.16612827777862549, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[50*100] = { 
  -44, -41, -24, -3, 55, -87, -32, 36, -21, 36, -53, -46, 50, -64, 30, 45, -56, 67, 21, -25, -47, 24, -35, -47, 43, -67, 23, 42, 63, 57, 64, 39, 42, -74, 42, 20, -46, 22, -47, 65, 53, -19, -23, 72, -41, -26, 52, 63, 25, -65, -17, -18, 47, -40, 62, -58, 55, 25, -69, 33, -57, 35, -24, -37, -72, -24, 18, 54, -26, 37, -10, 37, -57, 5, 42, -20, -15, -2, 12, 60, -23, 18, 70, -65, -27, 34, -4, 5, 55, 2, 26, -23, 64, 26, -9, -58, -20, -44, 68, -66, 
  -54, 15, 3, -69, 13, 70, -56, 18, -71, 52, 69, 65, 63, 29, -57, 50, 39, 49, -12, 52, 23, 1, 37, 62, -47, 31, 37, 48, -15, 61, 26, -53, 20, -29, 59, 12, -66, 6, -84, -61, -1, -28, 78, 51, 22, 52, -22, -78, -30, -68, 59, -38, -39, -60, 46, -43, 58, 59, 44, 36, -12, 68, -39, 49, -17, -61, -1, -20, 62, -41, -41, 18, -44, -37, 18, 36, -36, 20, 56, -68, 25, -32, 23, -44, -32, -77, 0, 49, -32, 25, 21, 60, 18, 29, -65, -37, 56, -4, -9, 28, 
  -57, -3, -43, -28, 65, 33, 35, 48, 41, -46, -39, 7, -33, 61, 47, 17, 49, -12, 34, -56, -7, 29, 52, -56, -5, -7, -42, 3, -69, -71, 10, -40, -5, 39, 65, 2, 60, 60, 31, -2, 30, -19, 3, 43, -12, 29, -37, 9, -56, -4, -28, 43, 23, -11, 36, -36, 60, 57, 34, 26, -49, 43, -29, 52, 45, 48, -61, -73, 5, 47, 58, -74, -26, 45, -37, -55, -46, -55, -79, 23, 41, 41, 56, 5, -21, 64, 44, -24, -65, -70, -71, 33, 9, 18, -77, -45, 22, -9, 55, -41, 
  -48, 26, 56, 72, -44, -50, 23, -57, -60, -68, -38, 0, -4, 70, -34, 61, 36, 62, -61, -44, -56, 13, -26, -12, 69, -52, -17, 50, -15, 37, -80, 11, -65, 38, -37, -45, 11, -16, 48, 69, 72, -17, -8, -1, -65, -10, -45, 43, -50, 29, 40, -72, -44, 66, 65, 44, -16, -42, 67, 62, -2, -20, -59, -71, 6, 64, -19, 49, -67, -1, -35, 53, -47, -38, -4, -25, 41, -11, -62, 61, -73, -46, -44, -32, 64, 10, -16, 4, 51, -20, -45, -30, 10, -17, -25, -17, 23, 65, -4, 36, 
  5, 62, -2, 11, 40, -36, 44, 30, 27, -75, 37, -40, 26, 34, 51, 49, 9, 58, -36, -5, -48, 6, 26, -33, -56, 1, -41, 19, -66, 21, -51, 54, -58, -45, -28, 70, 50, -4, -9, 31, 23, 26, 66, 9, 46, -75, 55, -67, 31, -53, -28, -31, -47, 46, 43, -11, -45, -36, -50, -59, -26, 38, -55, 66, -26, -8, 72, -55, -23, 4, 5, -71, -35, 32, 40, -54, 32, 22, 12, -12, -24, -2, 65, -15, -40, -27, 11, 40, -56, -65, 63, 41, 72, -47, -41, -5, 42, 62, 36, 19, 
  45, -17, -80, 51, 34, 5, 59, 44, 46, 61, -61, 61, 50, 9, -14, 10, 2, -69, -59, -2, 38, -17, -41, 18, -36, 2, 64, -7, 12, -37, -43, -53, 20, -19, -49, 68, 37, -25, 2, -65, -72, -59, -38, -39, -29, -61, 14, 20, -4, -59, 15, 29, -49, -14, -29, 9, -19, 44, -29, 22, 46, -43, -16, -58, -30, -72, -9, 34, 28, -48, 7, -54, -54, 37, -67, -71, -62, -64, 16, 22, 58, 37, 63, -26, -55, 14, -2, -15, 25, 24, -10, -21, -65, 32, 49, 24, -80, -48, -49, 62, 
  51, -17, -39, -10, 59, 42, -65, -50, 10, 42, 29, 30, -54, 25, 4, -17, 11, -73, 26, 9, -59, -57, -41, -62, -60, -36, -5, -64, 41, -66, 54, -12, 2, -60, -57, 8, -64, 66, 51, -15, 43, 51, 6, -16, -58, 0, 26, 43, 0, 56, 52, 16, -54, 9, -7, 19, -1, 22, -35, -13, -56, 16, 38, -15, -42, 21, 27, 54, 53, -68, 10, 59, 33, 73, 21, -57, -16, -22, -45, 63, -26, 47, 50, 47, 29, 41, -9, -14, -29, -26, 36, -10, 69, 36, -26, -10, 40, 8, 21, 16, 
  -45, -1, 46, -24, 54, 41, 8, -54, 16, 57, 13, 34, 40, -8, 10, 51, 69, 63, -46, -22, -22, 19, 52, -23, -36, -35, -22, 56, 36, -21, 2, -48, 38, -10, -50, -13, 47, -42, -12, -30, 48, 62, -70, -62, 9, 24, 54, 65, 60, 1, -50, 66, 33, 57, -25, -50, 47, -16, 2, 76, -62, -22, -31, 3, 52, -57, 46, 69, 38, -19, 68, 67, 15, 73, 45, 26, -47, -43, 0, -48, 40, -18, -33, 62, -19, 13, 54, 39, -19, 41, -5, 35, -6, 36, -71, -21, 39, 69, -32, -20, 
  -51, -3, 28, 32, -69, -20, 62, -5, -65, -50, 14, 26, -40, -17, -67, -59, -53, 10, -16, -26, -57, 45, -16, -71, -57, -18, 23, 36, 30, 56, -21, -1, -41, 67, 55, -36, 51, -11, -44, -70, 64, 68, 31, 65, -15, 35, -39, 61, 45, 2, 64, -4, 28, 20, -19, -34, 68, -39, -21, 20, -60, -13, -71, -15, -44, 25, -77, -20, -20, 71, -53, 17, 49, 38, -68, 46, -10, 33, -74, 41, -14, 13, 8, 30, 55, 53, -27, -26, -43, -73, -22, 1, 2, -47, 66, 23, -65, 23, -14, -55, 
  -19, 40, -16, 13, 24, 2, 0, -38, 42, 11, 29, -33, -55, -19, -32, -65, 12, 24, 24, -25, 15, 34, 56, -17, -65, -71, -57, 10, 16, -14, -32, 55, 65, 7, 57, 29, -30, 55, -6, 4, 29, 43, 10, -47, 43, 26, -61, -46, 41, 3, 19, 24, -28, -19, 16, -66, 25, 6, -51, -26, 43, -8, -57, 12, 42, -62, 61, -60, -24, -45, 32, 23, -25, -38, 13, 37, 39, -42, 17, 4, 43, -44, -14, 30, 26, -55, -13, 31, 26, -54, 22, -34, 70, 19, 50, -7, -20, -73, -48, -76, 
  -5, -29, -46, -69, -22, 63, -30, 76, 51, 28, -8, 6, -24, -71, -29, -2, -50, 1, 41, -4, -28, 60, 20, 31, 30, -28, -41, 39, 20, 40, -66, 30, 31, 13, 67, 43, -48, -32, -41, -41, 56, -23, -59, 0, -48, -8, -66, -32, -65, 44, 17, 24, 52, 64, 16, 8, -4, 61, 23, -9, -66, -23, 57, 63, -65, 66, -43, 34, -55, -28, -57, -22, -18, -28, 29, 70, -30, 47, 59, 3, -70, -28, -25, -19, 62, 32, -37, -20, 25, 27, -65, -50, 15, 14, -20, 58, 35, 12, -55, -70, 
  10, 49, -53, -18, 61, -31, 6, 29, 26, 13, -25, -2, 12, 80, 78, 32, -21, 21, 61, 10, -32, 54, 9, -9, -70, 8, 30, -38, -44, 66, 7, 43, -44, 50, 33, 42, -18, -70, 49, 19, 3, 20, 38, 7, -1, 44, 59, -66, -3, -86, -28, -22, 11, 50, 72, -64, -75, 72, -43, -36, 20, -80, 51, -6, 6, 70, 36, -22, -21, -41, 41, -26, -2, -79, 39, -37, -13, -8, -13, 30, -45, 63, 62, 32, -11, 35, -30, -6, -9, 2, -74, 64, 15, 72, -68, -55, -40, -46, 69, -20, 
  39, 29, -42, -21, -48, -37, -69, 68, 38, 19, 8, -15, -67, 4, -44, 62, 69, -56, 6, 21, 55, -49, -56, 7, 15, -40, 11, 12, -58, -47, 47, -14, 10, -26, -29, -56, 46, -52, -14, -35, -12, -75, 3, -21, 29, -51, -50, -9, 56, 18, -37, 59, -17, -57, 50, -81, -77, 23, 2, -21, 63, -59, -77, 49, 16, -37, -11, 54, 62, 14, -34, 28, 25, -65, -51, 70, 26, 1, 3, 63, -38, -38, 16, -12, 50, 63, -26, 39, -55, -37, 36, 34, 36, -45, -18, 50, -78, 63, -11, 17, 
  -12, 22, 34, 28, 77, -126, 1, 72, -6, -26, -39, 32, -12, -64, 28, 30, 2, 10, 43, -34, -9, 34, 36, 47, 82, -8, -47, 60, -11, 34, -41, 62, -4, -66, -31, -16, 72, 38, 31, -27, 86, 30, 52, -51, -45, 53, -48, -46, 28, -15, -87, 54, -37, -68, -23, 36, 77, -58, -26, -13, 80, 22, -30, -96, -18, -62, -33, 3, -4, 0, -55, -46, -58, -96, -43, -50, 28, 17, -38, -3, 2, 15, -20, 20, 24, 42, -34, 24, -24, 35, 40, -1, 16, -17, 24, 46, 81, -39, 11, -4, 
  14, -37, -67, 10, 74, 3, -73, 7, -7, -21, 30, -49, 72, 42, 18, 41, -5, 12, 5, -57, 14, -59, -65, 73, 46, 35, -4, -2, -36, -15, -32, 61, 55, -25, -21, -76, 25, 58, -13, -50, 65, -81, 38, -59, -67, -72, -24, -20, -32, -60, -29, 57, 40, -67, -58, 28, -11, -18, 39, -44, -31, 4, -49, 11, 60, -67, -22, -73, -17, -55, 62, 65, 7, -27, -55, 11, -28, -50, -56, -10, -21, -65, -13, 18, 11, 8, 30, 9, 55, 45, -3, 16, 49, 6, 58, -41, 78, -72, 25, 48, 
  52, -4, 62, -67, 37, -58, 47, 48, 18, 27, 3, -31, 21, -24, -3, 7, 3, -53, 43, 57, -16, -73, -8, -35, 13, -3, 72, -58, 12, 67, 74, -23, -47, 36, 23, -50, -39, -4, -49, 41, -1, -2, -59, 4, -34, -46, 11, -35, 16, 8, -52, -78, -55, 28, -36, 53, -15, -43, 65, 5, 66, -17, -37, 55, -75, -67, 63, -63, -60, 7, 46, -34, 51, -54, -42, 46, 59, 9, -47, 50, 44, -80, -13, 64, -33, 43, 0, 15, 24, -1, -3, 15, 30, -16, -71, 19, -13, 22, -10, 14, 
  -26, 1, 36, 22, 27, 2, -44, 15, -48, 59, -55, 41, -12, 59, -8, -5, 67, 37, 15, -78, -52, 54, -44, -13, -30, 7, 50, 40, 55, 12, 56, 61, -13, 64, 31, -3, -11, -58, -38, -44, 19, 22, -68, 45, 10, -53, -31, -11, -19, -16, 46, 10, 22, -19, 12, 61, -72, -30, 4, 7, 0, -72, 22, -73, -34, 51, -24, 46, 4, 32, 47, -69, -47, -52, 26, -48, 29, -22, 67, -14, 39, 12, -13, 65, -20, 57, 46, -55, 49, 16, -30, -24, 63, 18, -65, 18, -22, 17, 42, 28, 
  63, -19, 65, -40, 24, 32, 43, -55, -4, -23, 0, 33, 23, -34, -22, 21, 47, -68, 71, -53, 64, 46, 37, 63, 17, -54, -60, -54, 72, 71, 9, -7, -19, -14, -23, 61, 37, 9, -4, 13, -39, 58, 49, 58, 11, -10, -58, 36, 55, -67, -39, 55, -35, 46, 33, 11, 18, -39, 6, 70, 23, 16, -4, -14, -6, 23, -34, 31, 13, -52, 70, -71, -5, 21, 62, -45, 26, 13, 52, 12, -52, -11, -9, -55, -39, -68, -39, 66, -55, -5, 2, 40, 9, 49, 44, -71, 25, -46, -1, -41, 
  44, 40, 51, -50, 30, 0, -51, 19, 70, -10, 62, -17, -68, 11, -47, 24, -36, -43, 59, -54, -25, -26, 22, 51, 74, -3, -30, -62, -37, 32, -56, -24, 51, -20, 28, -69, -65, 78, 16, 25, 3, 59, 39, -71, -11, 31, 27, -62, -51, -63, -46, 66, 31, 17, 3, -36, -10, -46, -17, 43, 27, -37, 55, 17, -34, 22, -23, -4, 65, 20, 14, -64, -72, 66, 8, -51, -60, 63, -4, 47, 32, 57, 79, -70, -65, 29, -6, -21, 13, -58, -41, -39, -4, -38, -64, 42, -18, 56, 5, -9, 
  25, 47, 17, 64, -11, -25, -70, 4, -26, -38, -35, 14, 19, -68, -41, 62, 64, -76, -2, 59, -36, 24, 40, 42, -41, -43, -51, -56, -33, -12, -40, -14, 44, 40, -38, -44, -56, 8, -34, -13, 86, -64, 5, -29, 24, 36, -59, -18, 31, -10, -69, -21, -64, 47, -53, -43, -76, -2, -23, -23, -33, -72, 57, 64, 39, -7, 1, 31, 49, -87, -78, 36, -68, 59, -39, 4, -53, -4, -37, 40, -61, 59, -41, 20, 37, -45, 16, 8, -19, 52, -7, -56, -6, -69, -36, -29, -47, -69, 27, 61, 
  23, 14, 57, -3, -68, -36, 17, -6, -71, 13, 60, -8, -61, 63, 44, -1, 4, -23, 41, -65, -46, 65, 11, -66, 16, 44, 32, 34, -31, 7, 4, -19, -19, 10, 19, -21, 34, 6, 18, 53, -20, 36, -4, -64, -20, 73, -46, 27, -13, 49, -16, -9, -31, -64, 55, -59, -50, -21, 49, -2, -46, -65, -41, -15, -49, 16, -39, 73, 64, 59, 25, -56, -74, -19, -49, 44, -69, 47, -7, 33, 43, -7, -53, -29, 11, -9, -37, 52, -35, 25, 45, -10, -33, 21, -47, -49, -55, 47, -41, 42, 
  -35, -15, -25, 39, -1, 48, 48, -33, 24, 56, 11, 23, -26, -47, -47, -79, 67, -60, -26, -24, -47, -51, 69, -62, 37, -44, 37, -15, -48, -11, -15, 32, 56, -28, 20, -17, -69, -68, -10, -49, -73, -50, -82, 39, 55, -2, -64, 55, -12, -19, 14, -59, -37, -3, -14, 53, -9, -54, -62, -10, 43, 75, -8, 59, -32, 47, -23, -6, -44, 53, -76, -72, -27, -18, -47, 69, -61, 48, -52, 67, -34, -24, -40, 9, -20, 63, -23, -86, 66, 67, 27, 3, -70, 54, -30, 73, 5, 26, -28, -25, 
  18, -29, 20, 61, -16, -43, 13, 52, -3, -66, 27, -75, 14, -72, 36, -13, -4, 18, -44, -41, 74, 13, 28, -1, -6, 40, -2, 61, 43, -58, 2, 41, 27, -62, -44, 52, 57, 45, 67, 61, 43, -1, -67, 52, 23, 44, -19, -45, 6, -41, -61, 48, -73, -68, -65, -40, 7, -46, 22, -12, -9, -2, 17, 47, 22, 41, -56, -11, -69, -25, 23, -4, 6, -70, -43, 30, 10, 56, 42, 20, 32, 58, -8, 21, -20, 64, 54, 54, -30, 9, -21, -13, -38, -2, 16, 52, 17, 31, -23, -13, 
  -46, 58, 0, -10, 48, 54, -34, 44, -49, 7, -42, -64, 18, 63, -5, -46, 9, 29, -7, 60, -29, 36, 50, -43, -25, -68, 43, -75, 70, -59, 64, 6, -23, 31, -64, 44, 24, 22, -69, 0, 21, -15, 68, 32, -12, 34, 7, -28, 53, -36, 9, -16, 11, 26, -67, -36, 36, 3, 20, -37, 32, -3, -46, -74, 7, 38, -1, -55, -36, -26, -5, 62, 65, -9, -70, -41, -16, 0, 72, -62, 66, -59, 43, 50, 5, -45, -42, -29, -36, 27, -62, 13, 70, -55, 9, 36, -65, 55, -40, -16, 
  -42, -7, -65, -66, 29, -58, -41, -16, -51, -34, 37, -29, -66, 45, -16, -8, 63, 6, -41, 32, -67, -36, -22, 52, -47, -4, -14, 17, -60, 41, 30, 20, -36, 31, 56, 58, -34, -36, 73, 1, 30, -43, -3, 13, -45, 22, 66, 51, 69, 45, -25, -63, 29, -29, 33, 36, -78, 64, -50, 12, 5, -35, -70, 34, 18, 14, -11, -18, 9, 55, 44, -53, -65, -44, -32, 31, 32, 35, -67, -34, 63, -68, -39, -56, 33, -28, 0, 69, 22, -70, 59, 18, 31, -3, -39, -15, 1, 2, 51, 25, 
  -57, -21, -60, -12, -15, -68, 44, 48, 29, 57, -21, -44, -41, -31, 11, 37, -13, -1, -31, 25, -41, -69, 50, -44, -35, 6, -41, 21, 33, 25, -18, -77, -63, 53, 12, 57, -19, 31, -28, 45, 3, -20, -18, -20, -51, -73, 34, 24, -26, -14, 52, -51, -49, -18, -65, -9, 47, 5, -43, -19, 16, 4, -41, 64, 36, -52, 29, 70, 9, -38, -55, 3, 7, 71, 21, -14, -37, 66, 44, 22, 32, -73, -77, 2, 26, 2, 24, 29, 26, -79, 33, -51, -74, -31, -1, 5, 17, 49, 28, 50, 
  5, 11, -69, -14, -52, -63, 42, 31, 45, 57, -60, -34, 8, -25, 30, 0, 63, -22, 60, -43, 16, -3, 12, -35, -50, -28, -29, -59, -42, -12, -20, -57, 48, 9, 10, 50, -75, -26, 38, -68, 45, 74, 25, 6, 6, -71, -48, 8, -2, -17, -69, 4, 41, -53, 38, 70, -53, 48, -47, 49, 15, 21, 60, 12, -30, -15, -13, 29, 4, 6, 34, 48, -10, 43, 4, 26, 21, -65, -63, -67, -60, 3, 15, 61, 29, -48, 60, 4, -104, 31, -45, -27, -69, -68, -14, 45, 0, -8, -43, 5, 
  -42, -49, -14, 12, 62, -3, 34, 20, -47, -11, -15, 17, 4, -7, -10, 8, 62, 72, 52, -69, -51, 47, -24, 33, -9, 5, 18, 55, -24, 19, 18, 54, 13, -3, -42, -28, 34, 41, 67, -59, -31, 20, -54, -55, 28, 47, 73, 32, -63, -47, -53, -56, -49, 28, -80, 65, -62, -38, 17, 31, -73, -68, -75, 37, 79, -12, 15, -74, -12, 19, 37, -57, -65, -19, -30, 40, 4, 58, -14, 26, 6, -29, -43, -64, -30, -56, -41, 58, -43, -61, 21, 51, -31, 29, 81, -32, -26, -53, 64, -5, 
  2, -76, 70, 70, 40, 54, -25, -10, 3, -41, -2, 33, -12, -10, -20, -10, 13, -11, -38, 54, -24, 19, -36, -46, -28, 7, 2, -37, 5, 45, -45, 23, 7, 50, -56, -84, 56, 8, -52, 30, -38, 32, 14, -51, -45, 73, -61, -39, 61, 24, -9, -53, -46, 31, -12, -12, 71, -62, 45, -40, -30, 47, 70, -23, 65, -18, 10, 26, 20, -49, -24, -11, -58, -32, -27, 69, 2, 26, 12, 46, -51, -38, 62, -7, 11, -65, 21, -74, 9, 53, -36, -3, -2, 46, 54, -62, -17, 14, 51, -21, 
  10, -28, -55, 65, -60, -60, 14, 10, 46, -45, 39, -26, -67, -43, 37, -72, -20, -74, -21, -25, -66, -66, 7, 20, 39, 63, -52, -19, 4, 15, 13, -61, 41, 42, 32, -14, -6, 39, -68, -11, -50, 52, -91, 59, -4, 25, -46, -68, 8, -14, 33, 54, -42, 49, -21, -35, -2, 16, 50, 40, -78, 47, -17, -31, -19, 23, 39, -53, 30, -55, -7, -66, -3, 38, 48, 69, 78, -29, 20, 24, -69, -38, 20, 63, 57, -48, 14, -47, -48, -51, -77, -48, 33, -1, -24, 71, 66, 69, -31, -30, 
  20, -56, 55, -27, -16, -56, -34, 49, 62, -42, -7, 43, -58, -31, -74, -26, 62, 57, -24, -21, 17, -22, -53, 10, -22, 26, 48, 57, -66, -52, 68, 17, -61, -30, 10, -53, 12, -56, 21, -14, 61, 35, -1, -6, -44, -12, 31, 57, 3, -57, 41, -68, 22, 46, 1, -68, 3, -68, 27, 33, -18, 70, 40, 63, -66, -78, -30, 1, 21, -53, 67, -40, 31, 29, 67, 64, -27, 42, -65, 63, 47, -10, -9, -27, -56, -48, -19, -66, -3, -1, 44, -57, 5, -38, 59, -34, 16, -61, -55, 35, 
  18, -17, -28, 33, 46, -5, 54, -28, 13, 13, 66, 27, -11, -19, 19, 33, 12, -33, 49, 52, 35, -64, 51, -38, 38, 65, 66, 29, -33, -45, 63, 30, -68, 16, -18, -22, -63, -33, -17, -34, -14, 60, -46, -55, -33, 75, -83, -46, -37, 16, 26, -72, 64, -33, 5, -87, -14, -40, 60, -41, -27, 31, -39, 36, -40, -32, 16, 8, 15, 56, 77, -66, 7, 10, 55, 36, 56, 20, 61, -24, -20, -33, -8, -8, 40, -72, 73, 63, -19, 60, 37, 55, 73, -42, -29, -22, -16, 21, -59, 33, 
  -53, 55, -70, -66, 41, -7, -7, -7, 54, -4, -38, 1, 60, 38, -50, 35, 30, -8, -56, 68, -14, -46, -48, 28, -12, 47, -57, 65, 57, 52, -25, 4, 40, -14, -11, -60, 42, -65, -2, 61, -70, -32, 43, 64, 11, 66, -30, 43, -79, -65, 60, -45, 21, 16, -50, -37, 8, 43, 77, 56, 41, 57, -71, -65, 65, -29, 35, -43, -63, -55, 16, -44, -25, -22, 56, -31, 1, 61, -19, 65, -46, -69, -16, -3, -33, 36, 10, -40, 71, -9, -36, 23, 57, -36, -28, 10, -9, -11, 44, -47, 
  -66, 71, -43, 13, 68, 17, -10, 24, 53, -4, 8, 21, 6, -28, -17, -52, -53, -69, 5, -30, 55, 31, -7, -73, 64, -32, 76, -51, 55, 18, 73, 32, 10, 80, 40, -39, -41, 20, -63, 49, -31, -17, -2, -47, -67, -36, 58, -8, 27, -67, 18, 12, -53, -24, -22, 16, -44, -43, -31, -19, -36, -30, 32, 71, -58, 38, 63, 24, 22, -36, 26, -8, 57, 23, -31, 3, 51, -74, -7, 43, -8, -28, 18, 30, 9, -8, -68, 57, -32, 13, -6, -57, -17, 46, -34, 71, -18, -23, -52, 65, 
  -55, -47, 25, 68, 60, 26, -6, 55, 72, -67, -10, 36, -5, -73, -74, -8, 32, -6, -57, -56, 17, 34, 4, 53, 37, -23, -53, 28, -36, -24, -26, 66, -42, 59, 14, -3, 44, 41, -15, 16, 68, -73, -39, 63, -16, -28, -71, 32, -64, 48, -72, 21, -38, -61, 23, -9, -15, -67, 43, -42, -68, 6, 66, 39, -33, 56, -27, -46, -27, 50, -45, -18, -65, 21, 15, -5, 41, -26, -25, -31, 3, 66, 28, -73, -39, -26, 41, 27, -34, 69, 9, -5, 50, -74, -25, 68, -38, -10, -62, 23, 
  3, 60, 31, -63, 11, -68, -28, 83, 61, -12, 45, -19, -45, 15, 53, -10, -59, -5, -13, -29, -53, -24, 61, 31, -43, -16, -37, 25, 64, 36, 42, -49, 33, -49, -62, -39, -71, -55, 24, 18, -7, 18, -21, 66, -61, 16, -14, -47, 50, -48, -75, 24, 60, -64, 16, 34, -51, 41, 34, -16, 45, 60, 42, 18, 53, -64, -63, -20, 6, -18, -40, 69, 32, -36, 30, 33, -51, 46, -13, 80, -12, -69, -31, 5, -32, -67, 45, -73, -58, 28, 19, -25, -25, -56, 4, 58, 47, -16, 2, -55, 
  48, 26, -4, 24, 48, 58, 56, 44, -10, 8, -47, -3, 25, -74, 12, 32, -72, 69, 11, 5, -41, -29, 61, -47, -13, -48, -14, 52, 17, -15, 41, -1, -26, 2, 39, -32, -6, 63, 7, 7, -22, -72, 66, -44, -76, 15, -19, -69, -14, 53, 41, -28, -58, 21, 40, -31, -41, -61, -59, 33, 73, 5, -69, -62, 29, -3, 70, 55, 53, -76, -24, 2, -15, -91, -61, -25, 25, -1, -5, -36, -25, 16, 21, 48, 53, -42, 58, -29, 25, -27, 49, -56, 28, -80, -35, -38, -11, 12, 51, -42, 
  -62, 57, -2, -27, -62, -49, -33, -1, 13, 2, 29, -25, 14, 14, 58, -60, -37, 50, -78, -53, -82, -21, -7, -62, -66, -12, -31, -66, -23, -48, -62, 32, -44, -6, 23, 21, 55, -21, -48, -69, -23, 26, -8, -41, -7, 5, -109, 33, 38, -50, -64, -20, 50, -72, -65, 41, -36, 51, -41, 71, -73, 60, 58, -18, 48, 72, 82, -16, -69, -63, 36, -7, -23, -86, -39, 71, 40, 4, -58, 5, 15, -31, -44, 21, -35, -1, -72, -62, 43, 48, -72, 32, 51, 30, -28, 17, -53, -46, 5, -62, 
  30, -23, 76, 5, -5, 53, 9, -23, -47, 51, -82, 11, 52, 30, -57, -23, 40, 25, 45, -21, 31, -59, 51, -50, -37, 49, -42, -3, 6, -36, -30, -28, 37, 36, -29, -45, 56, 19, 17, 59, 54, -48, 73, -60, -9, 45, -65, -3, 45, 19, -60, 38, -33, -55, -51, 38, 44, -42, 69, 53, 45, -23, -26, -24, 43, 30, 46, -66, -15, -18, 42, -52, 4, 34, 3, 23, -66, 19, -2, -47, 21, -23, -44, -51, 53, 68, -31, -9, -54, -56, 35, 59, 40, 54, -49, -71, 5, -55, 53, 26, 
  53, 48, -26, -25, 66, 19, 44, -59, 31, -21, -32, -13, 70, -13, -4, -75, 34, 57, -3, -3, 37, 47, 66, 14, -70, -20, -14, -72, -20, -71, 2, -73, -68, 9, -72, -60, 66, 24, 44, 11, -7, -68, -51, 9, 15, -16, -54, -37, 44, -55, 29, -33, 25, -12, 11, -21, 16, -53, 3, -36, 37, 13, 51, 1, -41, -10, 73, -72, -37, -31, 53, -7, -59, 29, -37, 37, 18, 72, 8, 14, 74, -49, 44, -66, 43, 20, 73, 12, 19, 67, -36, 9, 27, 68, 24, 34, -23, -28, 65, -71, 
  59, -60, -24, 2, -36, -45, 74, 1, -56, -56, -36, -47, -62, 51, -28, 2, -78, 29, -22, -61, -21, -71, -52, 73, 6, 66, 9, -60, 37, 23, -69, -116, -1, 38, 75, -3, 26, -8, -13, -53, -99, -12, -1, 3, -65, -63, -32, -61, 50, 21, -12, -56, 41, 56, 36, -18, -22, -40, -9, -79, -26, 64, 25, 19, -49, 64, 44, -18, -12, -34, -74, -2, -73, 25, -63, -13, 10, 20, 8, 13, -25, 32, -33, 61, 23, 41, -18, 57, 28, 40, 6, -69, -1, -31, 13, -76, -86, -3, 60, 54, 
  17, -52, -46, -50, -4, 36, 9, 36, 71, 6, 29, -27, -37, 29, 86, 65, -16, -62, -33, 7, 17, 8, 7, 61, 43, 38, 3, 42, 37, -50, 22, -13, 18, -67, -20, 32, 45, 20, 57, 15, 42, -48, -4, -59, 23, -29, -53, 79, -51, -5, 19, 11, -48, -55, 54, 40, -54, -51, 50, -54, 63, 4, 61, -31, 9, -24, 50, -59, -73, 70, 76, -54, -25, -1, 51, 66, -69, -23, -35, 47, -66, 34, 20, -36, 48, -5, -26, 21, 54, 39, 21, -27, 37, -16, -78, -52, 39, 59, -34, -50, 
  46, 61, 20, -24, 40, 62, -41, -34, 46, -16, 68, -35, 26, 53, 22, -10, 18, 66, 66, -73, 68, 65, 55, 21, -18, 15, 73, 31, 54, -45, -19, -7, -50, 54, -43, -20, -14, -32, -71, 25, 15, 48, 55, 57, -64, 42, 47, 23, -60, -22, 63, -15, 30, 68, 49, -22, -39, -63, 36, 37, -70, 29, 11, 55, -56, 38, 12, 22, 18, 74, -46, -2, 29, 6, -30, -61, 29, -71, 6, -42, -73, 48, 12, -15, -24, -36, -51, -26, 13, 35, 44, 22, -34, 62, -33, -39, 47, -32, 35, 7, 
  -15, -56, -15, -51, -7, 32, 11, -61, 34, 58, 27, -13, -29, 18, 6, 0, 44, -2, 63, -54, 23, 14, 21, 44, -38, -63, 23, 53, 7, 41, 4, 38, 62, 31, 22, 0, 37, -46, -47, -43, -27, -60, -62, -10, 71, -58, -23, -27, 53, 39, 36, -4, -32, -62, 54, -2, -68, -28, -33, 51, -78, -67, 60, -15, 67, 37, 39, 23, -54, -5, -51, 69, -22, -73, -71, 13, 1, 37, -43, 18, 13, -29, 58, -25, 63, 3, 27, -41, 14, 0, -12, 55, 30, 63, 3, -50, -48, -2, -22, -18, 
  -73, 67, -14, 15, 92, -5, -50, 35, 27, 42, 63, -37, -4, -13, 35, -42, -9, 45, -3, -16, 53, 43, -33, 42, 24, 51, 50, -69, 49, -50, -7, 11, 2, 42, -39, 43, 41, -46, -48, -64, 53, 44, 65, 18, -46, -7, 23, -39, 40, 36, -27, 41, -66, -46, 41, 33, -55, 5, 30, -43, 8, 17, 52, 0, 32, -28, -15, 37, -8, -49, 11, 5, 29, -46, 64, 4, 43, 22, -65, -95, -22, -43, -11, 66, -12, -15, -42, 49, -13, -49, 14, -45, -46, -63, -62, -6, 45, 62, -48, -13, 
  -49, -67, -37, 40, -44, -43, -13, -10, -8, 6, 72, -2, -50, 58, -82, -77, -23, 35, -15, 60, 3, -11, -47, -24, 12, -73, 42, -41, -5, -65, -15, 4, -33, 41, 47, -19, -2, -61, -47, 29, 10, 14, -107, 4, -72, 4, 23, -58, 48, 72, 47, 7, -66, 62, -24, -30, 65, -15, -72, 16, 35, 30, 44, -12, -50, -34, -10, -37, 71, 63, 14, 28, -34, -19, -55, 38, 59, -26, 37, 9, 70, 30, -47, 71, 19, -57, 68, 41, 70, 30, 29, 11, 31, 67, -55, -32, -58, -70, -30, -40, 
  40, 60, -10, -32, -77, 37, -27, -59, -42, 52, -59, 40, -55, 47, -14, -54, -15, 27, 24, -30, 12, -52, -58, 14, -54, -45, -59, -40, 72, -65, -8, -75, 29, -58, 53, -10, -67, -52, 32, 64, 33, -28, -93, 1, -127, -13, 37, -37, 71, -57, 29, 35, -27, -52, 28, -31, 23, -25, 10, 7, -41, -41, -67, -13, -16, -50, 62, -63, -39, -58, 3, 19, -41, 52, 16, -34, -39, 73, 19, -13, 43, -39, 59, 69, -49, 66, -70, 42, 11, -70, 29, -4, -12, 34, 42, 53, 30, -14, 0, -22, 
  -15, 49, -12, 37, -68, -50, -50, 47, -64, 18, 78, -14, 31, 2, 31, 23, 36, -26, 43, 47, 18, 16, -24, -24, -8, 67, 73, 10, -64, 41, 68, -24, -54, -5, -9, -19, -60, 68, 52, 44, -62, 4, -37, 4, 49, 8, -40, 80, 56, 29, -70, 47, -54, -23, -27, -49, -14, 44, 73, -66, -29, 8, 35, -10, -18, -55, 75, -35, -30, -23, 69, 71, 65, 42, -18, -29, -55, 15, -9, -2, 72, -16, 8, 13, 37, 57, 9, -52, 82, 39, -56, 12, 39, -60, -65, -18, -34, 69, -64, 69, 
  63, -51, -15, 3, 42, -8, 38, -87, -3, -50, 1, 1, -27, -55, -62, 17, -55, 30, 34, -23, -6, -51, -16, 29, -41, 34, 44, 5, 59, 33, -31, -51, -72, -71, 14, -49, 18, 63, -26, 18, 13, 55, 64, -4, -34, -68, 28, -39, -30, -62, -12, -40, -46, 41, 22, -57, 38, -30, -6, -16, -67, -12, 59, -11, -38, -62, 9, -10, -72, 25, 23, -76, -3, 53, -15, -44, 61, -57, 32, -20, -60, 70, 54, 50, 62, 7, -16, -42, -43, -73, 13, -47, -55, -40, 4, -72, -27, -62, -43, -34, 
  -53, -30, -61, 63, -39, -54, 28, -2, 34, 82, 6, -41, -20, -43, 61, -20, 5, -71, -41, -25, -73, -7, 35, 2, 55, -60, -17, 54, 47, 73, 33, -12, -60, -26, -44, -4, 34, 48, 23, 71, -65, -1, 24, -44, -35, 8, 73, 22, -55, -13, -52, -30, -36, -63, -61, -49, 23, -31, 15, 60, 1, -26, -60, 68, 64, 80, -18, -64, 78, -79, 9, 43, 43, 79, 18, 6, -54, -65, 55, 24, 48, 40, 51, 27, -7, 10, -73, -42, -70, -47, -20, -60, -28, 28, 40, 51, -40, -63, 70, -62, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 50,100 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0026967737358063459, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[50] = { -3, 1, 5, 3, -1, -1, -2, -8, 1, -1, 3, -5, -3, 15, 7, 8, 5, -6, 2, 0, 3, -7, -4, -1, 0, 3, -2, -3, 8, -7, 8, 6, -9, 1, 0, 6, 4, 1, 7, 0, -3, -1, -2, 0, 0, 6, 0, -8, 0, 1, };
const TfArray<1, int> tensor_dimension4 = { 1, { 50 } };
const TfArray<1, float> quant4_scale = { 1, { 0.022363642230629921, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[20*50] = { 
  -11, -9, 12, 0, -28, 32, 11, 2, -18, -36, -3, -25, 12, 14, 20, -24, -7, 8, -25, 8, 22, 29, -15, 1, -5, -1, -37, 40, -24, 15, -2, 31, -14, 13, -30, 5, -2, 28, 35, 12, 43, 23, -5, -14, 11, -9, 36, 35, -38, -12, 
  23, 13, -32, 14, -14, -7, -6, 31, -17, 29, 0, 38, 24, -5, -25, 22, 6, 35, -36, -32, 34, 10, 36, 9, -31, 20, 19, 3, -22, 1, 9, 36, -10, -25, 4, -37, -13, -35, -31, -15, 38, 13, 32, -14, -39, 3, 27, 24, -31, -36, 
  -39, 17, 38, 38, 7, 4, -20, 36, 2, -20, -35, -19, -21, 26, 23, 17, 3, -2, -14, 20, -14, 16, 25, -5, -12, -21, 31, -9, 29, 19, -37, -6, 38, 4, 30, 12, 28, 19, -14, -38, 22, -33, -24, -10, -21, -23, 3, -25, 32, -26, 
  -39, -7, -27, 10, 25, 15, -40, -9, 13, -36, 31, 17, 24, 27, 21, -40, 26, -19, -7, -22, -18, -33, -38, -22, 21, -21, 40, -4, -42, -13, -16, -18, 33, -39, -1, -21, -24, -34, -34, 25, 23, -40, -14, -17, 31, -39, 36, -1, 34, -16, 
  -3, -31, -7, 23, -7, 35, 2, -18, 8, -35, 37, 29, -1, 31, 17, 11, 12, -32, 37, -34, -23, -34, 14, 7, -8, -10, 24, 29, 20, -36, -27, -27, -16, -20, 13, 16, 28, 6, 41, 24, 16, 42, -31, 35, -37, -30, 7, 34, 26, 18, 
  -5, 26, -17, -31, 22, -30, 0, 10, 36, 21, 15, -13, 11, 4, -11, 33, 32, -32, 5, 35, 34, 14, -39, -1, 29, 14, 12, -12, 0, -19, 25, 5, 2, 17, -23, 33, 7, -19, 24, 39, 5, -38, 2, -13, 23, 14, 10, -7, 39, 26, 
  -39, 4, 8, 26, 12, 25, 26, -40, -17, 6, -21, -3, 29, -5, 17, -16, 9, 20, -14, -20, 5, -8, 37, 38, 13, 16, -32, 14, -2, 0, 24, -7, -11, 27, 18, 29, 24, -13, 5, 4, 15, -4, 29, 12, -37, 37, 37, -30, -30, -1, 
  34, -4, -23, -19, 40, -26, -3, -24, -14, 11, 15, -25, 4, -25, -23, 32, 16, 3, 13, 24, 21, -36, -40, 11, 33, -15, 15, -34, -20, -34, 32, -30, -15, 22, 19, 34, 5, 1, 14, -19, 19, 35, 23, -30, -24, 19, 14, -37, -35, -14, 
  4, 6, -30, -20, -37, -31, -3, -38, -31, -6, 13, -22, 1, 26, -28, 10, -13, 41, -25, -37, -14, -4, 34, -26, -13, 21, -28, -33, -17, -33, -29, 0, 13, -31, -11, 40, -30, 27, 2, 34, 8, 28, -1, -12, -23, -63, -19, 17, -6, -19, 
  32, -17, -30, 31, 5, 10, -21, 6, 6, 14, 29, 26, -17, -12, 37, 34, 35, 27, -36, -12, 37, 9, -1, 20, -29, -2, -6, -22, 6, 3, -32, 33, 11, -17, -15, -10, -11, -12, 12, -18, -33, 28, -24, 6, -22, -33, 18, -23, -21, -10, 
  -34, -9, -39, -38, -50, 7, -4, 16, -8, 37, 10, 19, 14, 30, -67, 35, -27, -21, 26, -20, -2, 26, -36, -13, 20, -14, 24, 14, -8, -24, 26, 15, -51, -73, -40, -74, 3, -40, 2, 11, 4, -27, -38, -10, -62, -3, 12, -31, 34, -3, 
  21, -35, 16, 4, -11, 33, 24, -13, -15, -34, 4, -25, -36, -14, -4, -21, 14, -12, 27, -35, 4, -11, 33, -13, -13, -10, -18, -24, -42, 43, -15, -21, 38, 16, -5, -13, 17, 37, 1, 37, -38, -24, -3, 31, -12, 34, -18, 14, -35, 28, 
  16, 4, 29, 5, 37, 21, 2, -12, 19, 23, 1, -32, 36, 31, 29, -4, -36, 17, -15, 24, -32, -36, 25, -4, -17, 32, -27, -35, -4, -18, -31, 27, -15, -39, 22, -17, 17, 10, -5, 31, -14, -37, 15, 12, -35, -2, 33, -34, -34, -16, 
  20, 23, 37, -5, -10, -1, -19, -11, 33, 3, -5, 1, -21, 42, 1, 28, 30, 20, 19, 31, 36, -36, 3, 14, -35, 32, -39, -32, 7, -27, 26, 38, -38, 35, 23, -8, 19, -7, 34, 29, 9, 0, 23, -15, -29, -8, 12, -16, -28, -16, 
  24, 11, -26, -38, 5, -37, -38, 25, -28, 18, 21, -36, 33, -23, 18, 8, 32, 14, 6, 18, 9, 1, -1, -28, -30, -21, -30, 27, 30, 42, -24, 40, 24, -9, 41, -26, 15, -30, 3, 32, -18, -4, -12, -19, -3, -37, 33, 7, -9, -30, 
  -2, -39, 4, -5, 12, -8, -37, -10, 5, 28, -9, -22, -28, 6, 36, -21, 15, 24, 19, -42, 29, 29, 41, -35, 29, 37, 4, -30, -53, -21, -24, -33, 18, -29, 38, 21, -18, -9, 5, -6, 18, 28, -34, -19, -7, -4, -14, 25, 31, -36, 
  -3, 9, 35, 33, 9, 24, 30, -13, 0, 35, -21, -16, 10, 28, -6, 38, -35, -15, -33, 24, 39, 5, 34, 23, -36, 16, -15, 22, -11, 33, -28, -39, -2, -5, -5, -34, 37, -28, 38, -17, 25, -43, 33, -36, -20, 13, -35, -39, 1, 7, 
  8, 35, -30, -8, 22, 19, -36, -23, -37, 31, -30, 14, -16, 10, 36, -12, -33, 17, 24, -17, 16, -26, 33, 24, 35, 41, 25, 16, 23, 37, 2, -39, -40, -16, 5, 13, 18, 15, -19, 23, -13, 37, 8, 21, 4, 4, 23, -17, -39, 25, 
  11, -33, 31, 24, -127, 13, -32, -23, 2, 6, 11, -20, -43, 7, 4, -24, -18, -1, 3, -1, -39, -33, 25, 33, 45, 26, -24, 8, -7, 14, -17, 4, -7, 17, -32, -20, -41, -11, 19, 18, -8, -42, 17, 46, -49, 19, -72, 2, 7, -35, 
  -2, 36, -7, -35, 39, -19, -2, 10, -30, 0, -28, 39, 24, 8, -21, -36, -28, 29, 15, -20, 8, 7, 25, 8, 27, -2, 6, -7, -8, 1, -3, 9, -18, 3, -25, 17, -37, 14, 40, 35, -15, -11, 6, 33, 21, -37, 3, 23, 5, -24, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 20,50 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0072257239371538162, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[20] = { 2, -3, 0, 0, 2, 2, 0, -1, -2, 3, 0, -3, 2, 4, -4, -2, -1, 2, 3, -3, };
const TfArray<1, int> tensor_dimension6 = { 1, { 20 } };
const TfArray<1, float> quant6_scale = { 1, { 0.051554322242736816, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[10*20] = { 
  19, -52, -58, -4, -52, -10, -29, 17, 59, -5, 9, 46, -51, -15, 55, -1, -25, 23, -20, 10, 
  -22, 23, -61, -27, -40, -47, 41, -1, -51, -41, 41, 14, 20, 50, -44, -20, 25, -44, 87, -56, 
  -34, -32, -63, 11, 33, 58, 60, -20, -79, -55, 42, 22, 35, 43, -7, -81, -59, 16, 19, -30, 
  23, -49, 7, 9, -50, -40, -50, -36, 39, 2, -48, -39, -10, -39, 22, -16, 33, 48, 23, -38, 
  36, -54, 43, 10, 30, 18, -11, -17, -24, 33, -40, -30, 16, 61, -51, -57, 3, 27, 9, -19, 
  -51, -53, 22, -30, 4, -127, 42, -28, -56, -4, 10, -33, -30, -39, -50, -3, 50, 4, -44, -42, 
  -21, -18, -55, -35, 10, 57, -19, 24, 0, 58, 8, -60, -52, -52, 10, -50, -39, -48, 35, -48, 
  54, -50, -9, 4, 44, -53, 9, 8, -15, -22, -38, 30, -22, -50, 59, -4, -12, -24, 21, 38, 
  -50, -1, 47, -24, -11, -26, -2, 9, -36, 48, 27, -54, -25, -65, -2, -64, -60, 60, -10, 52, 
  2, 30, 23, -45, -44, -46, 57, 6, -28, -27, -47, 15, 9, -8, 6, -11, 38, -2, -29, 29, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 10,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0073037790134549141, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[10] = { 0, 2, 2, 0, 6, 0, 3, -2, -4, -3, };
const TfArray<1, int> tensor_dimension8 = { 1, { 10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.033830270171165466, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[4*10] = { 
  -92, 43, 68, -34, 50, -62, 14, -111, -127, -47, 
  -75, -12, 57, 17, 76, -59, 72, 3, -61, -21, 
  85, -75, 64, 28, -78, -17, 95, 32, 35, 66, 
  -77, 57, -20, -40, -66, 82, -24, 0, 68, 71, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 4,10 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0071185319684445858, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[4] = { 105, -107, 18, -79, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.011597982607781887, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,100 } };
const TfArray<1, float> quant11_scale = { 1, { 8.2927398681640625, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,50 } };
const TfArray<1, float> quant12_scale = { 1, { 7.134831428527832, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,20 } };
const TfArray<1, float> quant13_scale = { 1, { 4.6318860054016113, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,10 } };
const TfArray<1, float> quant14_scale = { 1, { 1.6292660236358643, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,4 } };
const TfArray<1, float> quant15_scale = { 1, { 1.8152707815170288, } };
const TfArray<1, int> quant15_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,4 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 11,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 12,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 13,7,8 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 14,9,10 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata5 = { 1 };
const TfArray<1, int> inputs5 = { 1, { 15 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension0, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 2700, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 5000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension12, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension14, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension15, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 6; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 6; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 6; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
